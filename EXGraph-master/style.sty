variable {
    primary = rgba(1, 1, 0, 1)
    secondary = rgba(0,0.9,0.9,1)
}




forall Graph A
{
    A.icon = Circle {
        strokeWidth: 0.0
        color: rgba(0.0, 0.0, 0.0, 0.0)
    }

    A.text = Text{
        string: A.label
    }


    ensure contains(A.icon, A.text)
    A.text above A.icon
}

forall Graph A; Graph B; Graph Result 
where Result := or(A, B) 
{

    override A.icon.color = variable.primary

    override B.icon.color = variable.primary

    Result.icon2 = Circle {
        strokeWidth: 0.0
        center: Result.icon.center
        r: Result.icon.r - 1.0
        color: variable.secondary
    }


    override Result.text = Circle{
        strokeWidth: 0.0
        r : 0.0
    }


    ensure smallerThan(A.icon, Result.icon)
    ensure smallerThan(B.icon, Result.icon)

    ensure contains(Result.icon2, A.icon, 5.0)
    ensure contains(Result.icon2, B.icon, 5.0)

    ensure disjoint(A.icon, B.icon)

    ensure minSize(Result.icon)
    ensure minSize(A.icon)
    ensure minSize(B.icon)

    ensure maxSize(Result.icon)
    ensure maxSize(A.icon)
    ensure maxSize(B.icon)

    ensure contains(A.icon, A.text)
    ensure contains(B.icon, B.text)

    A.icon above Result.icon2
    B.icon above Result.icon2
}

forall Graph A; Graph B; Graph Result 
where Result := if(A, B) 
{
    
    override Result.icon = Circle{
        strokeWidth: 0.0
        color: variable.primary




    }

    override Result.icon2 = Circle{
        strokeWidth: 0.0
        color: variable.secondary
    }

    



    override Result.icon2.r = Result.icon.r / 1.6




   
    ensure outsideOf(A.text, Result.icon2)
    ensure contains(Result.icon, A.text)
    ensure contains(Result.icon2, B.text)



    ensure maxSize(Result.icon)
    ensure minSize(Result.icon)
    ensure maxSize(Result.icon2)
    ensure minSize(Result.icon2)
    ensure contains(Result.icon, Result.icon2)

    ensure smallerThan(Result.icon, Result.icon2, 0.5)
    ensure contains(Result.icon2, B.icon)


    Result.icon2 above Result.icon




}

